# https://github.com/Pro/raspi-toolchain
# https://solarianprogrammer.com/2018/05/06/building-gcc-cross-compiler-raspberry-pi/

# Ubuntu 18.04 at the time of writing (2019-04-02)
FROM ubuntu:bionic-20180821

# This should match the one on your raspi
ENV GCC_VERSION gcc-8.3.0
ENV GLIBC_VERSION glibc-2.28
ENV BINUTILS_VERSION binutils-2.31.1
ENV GDB_VERSION gdb-8.2.1
ARG DEBIAN_FRONTEND=noninteractive

ARG TOOLCHAIN_PATH_ARG # you could give this a default value as well
ENV TOOLCHAIN_PATH=$TOOLCHAIN_PATH_ARG

# Install some tools and compilers + clean up
RUN apt-get update && \
    apt-get install -y git wget gcc-8 g++-8 cmake bzip2 rsync texinfo python-dev && \
    apt-get clean autoclean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Use GCC 8 as the default
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 999 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 999 && \
    update-alternatives --install /usr/bin/cc  cc  /usr/bin/gcc-8 999 && \
    update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-8 999

# Add a user called `develop`
RUN useradd -ms /bin/bash develop && \
    echo "develop   ALL=(ALL:ALL) ALL" >> /etc/sudoers

WORKDIR /home/develop

# Download and extract GCC
RUN wget https://ftp.gnu.org/gnu/gcc/${GCC_VERSION}/${GCC_VERSION}.tar.gz && \
    tar xf ${GCC_VERSION}.tar.gz && \
    rm ${GCC_VERSION}.tar.gz

# Download and extract LibC
RUN wget https://ftp.gnu.org/gnu/libc/${GLIBC_VERSION}.tar.bz2 && \
    tar xjf ${GLIBC_VERSION}.tar.bz2 && \
    rm ${GLIBC_VERSION}.tar.bz2

# Download and extract BinUtils
RUN wget https://ftp.gnu.org/gnu/binutils/${BINUTILS_VERSION}.tar.bz2 && \
    tar xjf ${BINUTILS_VERSION}.tar.bz2 && \
    rm ${BINUTILS_VERSION}.tar.bz2

# Download and extract GDB
RUN wget https://ftp.gnu.org/gnu/gdb/${GDB_VERSION}.tar.gz && \
    tar xvf ${GDB_VERSION}.tar.gz && \
    rm ${GDB_VERSION}.tar.gz

# Download the GCC prerequisites
RUN cd ${GCC_VERSION} && contrib/download_prerequisites && rm *.tar.*

# Build BinUtils
RUN mkdir -p ${TOOLCHAIN_PATH}
WORKDIR /home/develop/build-binutils
RUN ../${BINUTILS_VERSION}/configure \
        --prefix=${TOOLCHAIN_PATH} --target=arm-linux-gnueabihf \
        --with-arch=armv6 --with-fpu=vfp --with-float=hard \
        --disable-multilib
RUN make -j$(nproc) && \
    make install

# Build the first part of GCC
WORKDIR /home/develop/build-gcc
RUN ../${GCC_VERSION}/configure \
        --prefix=${TOOLCHAIN_PATH} \
        --target=arm-linux-gnueabihf \
        --enable-languages=c,c++,fortran \
        --with-arch=armv6 --with-fpu=vfp --with-float=hard \
        --disable-multilib
RUN make -j$(nproc) all-gcc && \
    make install-gcc
ENV PATH=${TOOLCHAIN_PATH}/bin:${PATH}

# Install dependencies
RUN apt-get update && \
    apt-get install -y gawk bison python3 && \
    apt-get clean autoclean && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Download and install the Linux headers
WORKDIR /home/develop
RUN git clone --depth=1 https://github.com/raspberrypi/linux.git
WORKDIR /home/develop/linux
ENV KERNEL=kernel7
RUN make ARCH=arm INSTALL_HDR_PATH=${TOOLCHAIN_PATH}/arm-linux-gnueabihf headers_install

# Build GLIBC
WORKDIR /home/develop/build-glibc
RUN ../${GLIBC_VERSION}/configure \
        --prefix=${TOOLCHAIN_PATH}/arm-linux-gnueabihf \
        --build=$MACHTYPE --host=arm-linux-gnueabihf --target=arm-linux-gnueabihf \
        --with-arch=armv6 --with-fpu=vfp --with-float=hard \
        --with-headers=${TOOLCHAIN_PATH}/arm-linux-gnueabihf/include \
        --disable-multilib libc_cv_forced_unwind=yes
RUN make install-bootstrap-headers=yes install-headers
RUN make -j8 csu/subdir_lib
RUN install csu/crt1.o csu/crti.o csu/crtn.o ${TOOLCHAIN_PATH}/arm-linux-gnueabihf/lib
RUN arm-linux-gnueabihf-gcc -nostdlib -nostartfiles -shared -x c /dev/null \
        -o ${TOOLCHAIN_PATH}/arm-linux-gnueabihf/lib/libc.so
RUN touch ${TOOLCHAIN_PATH}/arm-linux-gnueabihf/include/gnu/stubs.h

# Continue building GCC
WORKDIR /home/develop/build-gcc
RUN make -j$(nproc) all-target-libgcc
RUN make install-target-libgcc

# Finish building GLIBC
WORKDIR /home/develop/build-glibc
RUN make -j$(nproc)
RUN make install

# Finish building GCC
WORKDIR /home/develop/build-gcc
RUN make -j$(nproc)
RUN make install

# Build GDB
WORKDIR /home/develop/build-gdb
RUN ../${GDB_VERSION}/configure \
        --prefix=${TOOLCHAIN_PATH} --target=arm-linux-gnueabihf --disable-nls --with-python
RUN make -j$(nproc)
RUN make install

USER develop

